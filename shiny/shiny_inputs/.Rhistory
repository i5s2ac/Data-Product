print(t_test_result)
# Problema 4
# Datos de ejemplo
diametros <- c(10.05, 9.98, 10.10, 9.95, 10.02, 9.99, 10.04, 10.01, 9.96, 10.08)
# Prueba t para la media
t_test_result <- t.test(diametros, mu = 10)
# Mostrar resultados
print(t_test_result)
# Problema 4
# Datos de ejemplo
diametros <- c(10.05, 9.98, 10.10, 9.95, 10.02, 9.99, 10.04, 10.01, 9.96, 10.08)
# Prueba t para la media
t_test_result <- t.test(diametros, mu = 10)
# Mostrar resultados
print(t_test_result)
# ---- Cargar Librerias ----
library(tidyverse)
library(ggplot2)
library(openxlsx)
#install.packages("scorecard")
library(scorecard)
# ---- Cargar Data Set German Credit ----
df <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data")
colnames(df) <- c("chk_acct", "duration", "credit_his", "purpose",
"amount", "saving_acct", "present_emp", "installment_rate", "sex", "other_debtor",
"present_resid", "property", "age", "other_install", "housing", "n_credits",
"job", "n_people", "telephone", "foreign", "response")
df$response[df$response==2] <- 0
df %>% summary()
# ---- Tablas de Frecuencia por Edad ----
df.age <- df %>% select(age, response) %>%
group_by(age) %>% summarise(
total_credit = n(),
bad_credit = sum(response),
bad_rate = mean(response)
)
df.age %>% View()
# ---- Graficando La Edad por la Tasa de Malos ----
## Graficando el bad rate
ggplot(df.age, aes(x = age, y = bad_rate)) +
geom_line() +
labs(title = "Tasa de Malos por Edad",
x = "Edad",
y = "Tasa de Malos") +
theme_minimal()
## Graficando el bad rate y la frecuencia de créditos
ggplot(df.age, aes(x = age)) +
# Barras para total_credit
geom_bar(aes(y = total_credit), stat = "identity", fill = "skyblue", alpha = 0.7) +
# Línea para bad_rate
geom_line(aes(y = bad_rate * max(total_credit)), color = "red", size = 1) +
# Añadir un segundo eje y para bad_rate
scale_y_continuous(
name = "Total de Créditos",
sec.axis = sec_axis(~ . / max(df.age$total_credit), name = "Tasa de Malos (Bad Rate)")
) +
labs(title = "Tasa de Malos de la Variable Age",
x = "Edad") +
theme_minimal()
# ---- Binning con Dplyr ----
df.age_bin <- df %>% select(age, response) %>%
mutate(age_bin = ntile(age, 5)) %>%
group_by(age_bin) %>% summarise(
bad_credit = sum(response),
good_credit = sum(1 - response),
total_credit = n(),
bad_rate = bad_credit / total_credit,
min_age = min(age),
max_age = max(age)
)
df.age_bin
ggplot(df.age_bin, aes(x = age_bin)) +
# Barras para total_credit
geom_bar(aes(y = total_credit), stat = "identity", fill = "skyblue", alpha = 0.7) +
# Línea para bad_rate
geom_line(aes(y = bad_rate * max(total_credit)), color = "red", size = 1) +
# Añadir un segundo eje y para bad_rate
scale_y_continuous(
name = "Total de Créditos",
sec.axis = sec_axis(~ . / max(df.age_bin$total_credit), name = "Tasa de Malos (Bad Rate)")
) +
labs(title = "Tasa de Malos de los Bines de la Variable Age",
x = "Bines de Edad") +
theme_minimal()
# ---- Calculando el WoE y el Information Value con Dplyr ----
df.age_bin_woe <- df.age_bin %>%
mutate(
pct_good = good_credit / sum(good_credit),
pct_bad = bad_credit / sum(bad_credit),
woe = log(pct_good / pct_bad),
iv_bin = (pct_good - pct_bad) * woe,
iv_var = sum(iv_bin)
)
df.age_bin_woe
# ---- Binning con paquete Scorecard ----
bins <- woebin(df, y = "response", x = c("age"))
bins$age
df_binned <- woebin_ply(df, bins)
head(df_binned)
plot <- woebin_plot(bins)
plot[[1]]
# ---- Ejercicio - binning con dplyr y la variable amount ----
df.amount_bin <- df %>% select(amount, response) %>%
mutate(amount_bin = ntile(amount, 5)) %>%
group_by(amount_bin) %>% summarise(
bad_credit = sum(response),
good_credit = sum(1 - response),
total_credit = n(),
bad_rate = bad_credit / total_credit
)
df.amount_bin
ggplot(df.amount_bin, aes(x = amount_bin, y = bad_rate)) +
geom_line() +
labs(title = "Tasa de Malos por los bines de Amount",
x = "Amount bin",
y = "Bad Rate") +
theme_minimal()
ggplot(df.amount_bin, aes(x = amount_bin)) +
# Barras para total_credit
geom_bar(aes(y = total_credit), stat = "identity", fill = "skyblue", alpha = 0.7) +
# Línea para bad_rate
geom_line(aes(y = bad_rate * max(total_credit)), color = "red", size = 1) +
# Añadir un segundo eje y para bad_rate
scale_y_continuous(
name = "Total de Créditos",
sec.axis = sec_axis(~ . / max(df.amount_bin$total_credit), name = "Tasa de Malos (Bad Rate)")
) +
labs(title = "Tasa de Malos por los bines de Amount",
x = "Bines de Amount") +
theme_minimal()
# ---- Mismo ejercicio con amount con el paquete Scorecard ----
bins <- woebin(df, y = "response", x = c("age", "n_credits", "amount"))
bins$amount
df_binned <- woebin_ply(df, bins)
head(df_binned)
plot <- woebin_plot(bins)
plot[[3]]
# ---- Calculando el WoE y el Information Value con Dplyr ----
df.age_bin_woe <- df.age_bin %>%
mutate(
pct_good = good_credit / sum(good_credit),
pct_bad = bad_credit / sum(bad_credit),
woe = log(pct_good / pct_bad),
iv_bin = (pct_good - pct_bad) * woe,
iv_var = sum(iv_bin)
)
df.age_bin_woe
# ---- Calculando el WoE y el Information Value con Dplyr ----
df.age_bin_woe <- df.age_bin %>%
mutate(
pct_good = good_credit / sum(good_credit),
pct_bad = bad_credit / sum(bad_credit),
woe = log(pct_good / pct_bad),
iv_bin = (pct_good - pct_bad) * woe,
iv_var = sum(iv_bin)
)
df.age_bin_woe
# ---- Binning con paquete Scorecard ----
bins <- woebin(df, y = "response", x = c("age"))
bins$age
df_binned <- woebin_ply(df, bins)
head(df_binned)
plot <- woebin_plot(bins)
plot[[1]]
View(df.age_bin_woe)
View(df_binned)
View(df.amount_bin)
library(readxl)
CHAPART1 <- read_excel("Downloads/CHAPART1.xlsx")
View(CHAPART1)
library(readxl)
CHAPART1 <- read_excel("Downloads/CHAPART1.xlsx")
View(CHAPART1)
df <- read_excel("Downloads/CHAPART1.xlsx")
df <- read_excel("Downloads/CHAPART1.xlsx")
# Convert Date and Time into a single DateTime column
df$DateTime <- as.POSIXct(paste(df$Date, df$Time), format="%Y-%m-%d %H:%M:%S")
# 1. Temperature Over Time
ggplot(df, aes(x = DateTime, y = `Temperatura (°C)`)) +
geom_line(color = "blue") +
labs(title = "Temperature Over Time", x = "Time", y = "Temperature (°C)") +
theme_minimal()
library(ggplot2)
df$DateTime <- as.POSIXct(paste(df$Date, df$Time), format="%Y-%m-%d %H:%M:%S")
ggplot(df, aes(x = DateTime, y = `Temperatura (°C)`)) +
geom_line(color = "blue") +
labs(title = "Temperature Over Time", x = "Time", y = "Temperature (°C)") +
theme_minimal()
# Convert necessary columns to numeric, handling NAs
df$`Temperatura (°C)` <- as.numeric(df$`Temperatura (°C)`)
df$`Humedad Relativa (%)` <- as.numeric(df$`Humedad Relativa (%)`)
df$`Concentración de CO2 (ppm)` <- as.numeric(df$`Concentración de CO2 (ppm)`)
ggplot(df, aes(x = DateTime, y = `Temperatura (°C)`)) +
geom_line(color = "blue") +
labs(title = "Temperature Over Time", x = "Time", y = "Temperature (°C)") +
theme_minimal()
df <- na.omit(df)
ggplot(df, aes(x = DateTime, y = `Temperatura (°C)`)) +
geom_line(color = "blue") +
labs(title = "Temperature Over Time", x = "Time", y = "Temperature (°C)") +
theme_minimal()
# Convert necessary columns to numeric, handling NAs
df$`Temperatura (°C)` <- as.numeric(df$`Temperatura (°C)`)
df$`Humedad Relativa (%)` <- as.numeric(df$`Humedad Relativa (%)`)
df$`Concentración de CO2 (ppm)` <- as.numeric(df$`Concentración de CO2 (ppm)`)
df <- read_excel("Downloads/CHAPART1.xlsx")
View(df)
class(df$Position)
class(df$`Temperatura (°C)`)
ggplot(df, aes(x = DateTime, y = `Temperatura (°C)``)) +
geom_line(color = "blue") +
labs(title = "Temperature Over Time", x = "Time", y = "Temperature (°C)") +
theme_minimal()
ggplot(df, aes(x = DateTime, y = `Temperatura (°C)``)) +
# 1. Temperature Over Time
ggplot(df, aes(x = DateTime, y = `Temperatura (°C)`)) +
geom_line(color = "blue") +
labs(title = "Temperature Over Time", x = "Time", y = "Temperature (°C)") +
theme_minimal()
# 4. Temperature vs. Humidity Scatter Plot
ggplot(df, aes(x = `Temperatura (°C)`, y = `Humedad Relativa (%)`)) +
geom_point(color = "purple") +
labs(title = "Temperature vs. Humidity", x = "Temperature (°C)", y = "Relative Humidity (%)") +
theme_minimal()
# 4. Temperature vs. Humidity Scatter Plot
ggplot(df, aes(x = `Position`, y = `Humedad Relativa (%)`)) +
geom_point(color = "purple") +
labs(title = "Temperature vs. Humidity", x = "Temperature (°C)", y = "Relative Humidity (%)") +
theme_minimal()
# 4. Temperature vs. Humidity Scatter Plot
ggplot(df, aes(x = `Position`, y = `Humedad Relativa (%)`)) +
geom_point(color = "purple") +
labs(title = "Temperature vs. Humidity", x = "Position", y = "Relative Humidity (%)") +
theme_minimal()
ggplot(df, aes(x = `Concentración de CO2 (ppm)`, y = `Temperatura (°C)`)) +
geom_point(color = "orange") +
labs(title = "CO2 Concentration vs. Temperature", x = "CO2 Concentration (ppm)", y = "Temperature (°C)") +
theme_minimal()
# 5. CO2 Concentration vs. Temperature Scatter Plot
ggplot(df, aes(x = `Position`, y = `Temperatura (°C)`)) +
geom_point(color = "orange") +
labs(title = "CO2 Concentration vs. Temperature", x = "CO2 Concentration (ppm)", y = "Temperature (°C)") +
theme_minimal()
# 6. Temperature Distribution Histogram
ggplot(df, aes(x = `Temperatura (°C)`)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Temperature Distribution", x = "Temperature (°C)", y = "Count") +
theme_minimal()
ggplot(df, aes(x = `Humedad Relativa (%)`)) +
geom_histogram(binwidth = 1, fill = "green", color = "black") +
labs(title = "Humidity Distribution", x = "Relative Humidity (%)", y = "Count") +
theme_minimal()
# 8. CO2 Concentration Distribution Histogram
ggplot(df, aes(x = `Concentración de CO2 (ppm)`)) +
geom_histogram(binwidth = 50, fill = "red", color = "black") +
labs(title = "CO2 Concentration Distribution", x = "CO2 Concentration (ppm)", y = "Count") +
theme_minimal()
# 4. Temperature vs. Humidity Scatter Plot
ggplot(df, aes(x = `Position`, y = `Humedad Relativa (%)`)) +
geom_point(binwidth = 1, color = "purple") +
labs(title = "Temperature vs. Humidity", x = "Position", y = "Relative Humidity (%)") +
theme_minimal()
# 4. Temperature vs. Humidity Scatter Plot
# Crear bins para la columna `Position`
df$Position_Binned <- cut(df$Position, breaks = 10) # Ajusta `breaks` según el número de bins que desees
# Calcular la media de `Humedad Relativa (%)` por cada bin
df_binned <- df %>%
group_by(Position_Binned) %>%
summarise(Humedad_Media = mean(`Humedad Relativa (%)`, na.rm = TRUE))
library(dplyr)
# 4. Temperature vs. Humidity Scatter Plot
# Crear bins para la columna `Position`
df$Position_Binned <- cut(df$Position, breaks = 10) # Ajusta `breaks` según el número de bins que desees
# Calcular la media de `Humedad Relativa (%)` por cada bin
df_binned <- df %>%
group_by(Position_Binned) %>%
summarise(Humedad_Media = mean(`Humedad Relativa (%)`, na.rm = TRUE))
# Graficar usando ggplot2
ggplot(df_binned, aes(x = Position_Binned, y = Humedad_Media)) +
geom_point(color = "purple") +
labs(title = "Humidity vs. Position (Binned)", x = "Position (Binned)", y = "Average Relative Humidity (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar las etiquetas del eje x si es necesario
# 4. Temperature vs. Humidity Scatter Plot
# Crear bins para la columna `Position`
df$Position_Binned <- cut(df$Position, breaks = 2) # Ajusta `breaks` según el número de bins que desees
# Calcular la media de `Humedad Relativa (%)` por cada bin
df_binned <- df %>%
group_by(Position_Binned) %>%
summarise(Humedad_Media = mean(`Humedad Relativa (%)`, na.rm = TRUE))
# Graficar usando ggplot2
ggplot(df_binned, aes(x = Position_Binned, y = Humedad_Media)) +
geom_point(color = "purple") +
labs(title = "Humidity vs. Position (Binned)", x = "Position (Binned)", y = "Average Relative Humidity (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar las etiquetas del eje x si es necesario
# 4. Temperature vs. Humidity Scatter Plot
# Crear bins para la columna `Position`
df$Position_Binned <- cut(df$Position, breaks = 1000) # Ajusta `breaks` según el número de bins que desees
# Calcular la media de `Humedad Relativa (%)` por cada bin
df_binned <- df %>%
group_by(Position_Binned) %>%
summarise(Humedad_Media = mean(`Humedad Relativa (%)`, na.rm = TRUE))
# Graficar usando ggplot2
ggplot(df_binned, aes(x = Position_Binned, y = Humedad_Media)) +
geom_point(color = "purple") +
labs(title = "Humidity vs. Position (Binned)", x = "Position (Binned)", y = "Average Relative Humidity (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar las etiquetas del eje x si es necesario
# 4. Temperature vs. Humidity Scatter Plot
# Crear bins para la columna `Position`
df$Position_Binned <- cut(df$Position, breaks = 200) # Ajusta `breaks` según el número de bins que desees
# Calcular la media de `Humedad Relativa (%)` por cada bin
df_binned <- df %>%
group_by(Position_Binned) %>%
summarise(Humedad_Media = mean(`Humedad Relativa (%)`, na.rm = TRUE))
# Graficar usando ggplot2
ggplot(df_binned, aes(x = Position_Binned, y = Humedad_Media)) +
geom_point(color = "purple") +
labs(title = "Humidity vs. Position (Binned)", x = "Position (Binned)", y = "Average Relative Humidity (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar las etiquetas del eje x si es necesario
# 4. Temperature vs. Humidity Scatter Plot
# Crear bins para la columna `Position`
df$Position_Binned <- cut(df$Position, breaks = 10) # Ajusta `breaks` según el número de bins que desees
# Calcular la media de `Humedad Relativa (%)` por cada bin
df_binned <- df %>%
group_by(Position_Binned) %>%
summarise(Humedad_Media = mean(`Humedad Relativa (%)`, na.rm = TRUE))
# Graficar usando ggplot2
ggplot(df_binned, aes(x = Position_Binned, y = Humedad_Media)) +
geom_point(color = "purple") +
labs(title = "Humidity vs. Position (Binned)", x = "Position (Binned)", y = "Average Relative Humidity (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) #
library(readxl)
library(ggplot2)
library(dplyr)
df <- read_excel("Downloads/CHAPART1.xlsx")
# Convert Date and Time into a single DateTime column
df$DateTime <- as.POSIXct(paste(df$Date, df$Time), format="%Y-%m-%d %H:%M:%S")
# Convert necessary columns to numeric, handling NAs
df$`Temperatura (°C)` <- as.numeric(df$`Temperatura (°C)`)
df$`Humedad Relativa (%)` <- as.numeric(df$`Humedad Relativa (%)`)
df$`Concentración de CO2 (ppm)` <- as.numeric(df$`Concentración de CO2 (ppm)`)
class(df$`Temperatura (°C)`)
library(ggplot2)
# Graficar el scatter plot con una línea de tendencia
ggplot(df, aes(x = Position, y = `Humedad Relativa (%)`)) +
geom_point(color = "purple") +  # Puntos del scatter plot
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Línea de tendencia con regresión lineal
labs(title = "Position vs. Relative Humidity with Trendline", x = "Position", y = "Relative Humidity (%)") +
theme_minimal()
library(ggplot2)
# Graficar con transparencia en los puntos y suavizado no lineal
ggplot(df, aes(x = Position, y = `Humedad Relativa (%)`)) +
geom_point(color = "purple", alpha = 0.4) +  # Ajustar transparencia con alpha
geom_smooth(method = "loess", color = "blue", se = FALSE) +  # Suavizado no lineal
geom_smooth(method = "lm", color = "red", linetype = "dashed", se = FALSE) +  # Agregar también la línea de tendencia lineal
labs(title = "Position vs. Relative Humidity with Trendlines",
x = "Position", y = "Relative Humidity (%)") +
theme_minimal()
# Graficar con transparencia en los puntos y suavizado no lineal
ggplot(df, aes(x = Position, y = `Humedad Relativa (%)`)) +
geom_point(color = "black", alpha = 0.4) +  # Ajustar transparencia con alpha
geom_smooth(method = "loess", color = "blue", se = FALSE) +  # Suavizado no lineal
geom_smooth(method = "lm", color = "red", linetype = "dashed", se = FALSE) +  # Agregar también la línea de tendencia lineal
labs(title = "Position vs. Relative Humidity with Trendlines",
x = "Position", y = "Relative Humidity (%)") +
theme_minimal()
# Graficar con transparencia en los puntos y suavizado no lineal
ggplot(df, aes(x = Position, y = `Humedad Relativa (%)`)) +
geom_point(color = "black", alpha = 0.01) +  # Ajustar transparencia con alpha
geom_smooth(method = "loess", color = "blue", se = FALSE) +  # Suavizado no lineal
geom_smooth(method = "lm", color = "red", linetype = "dashed", se = FALSE) +  # Agregar también la línea de tendencia lineal
labs(title = "Position vs. Relative Humidity with Trendlines",
x = "Position", y = "Relative Humidity (%)") +
theme_minimal()
# Graficar con transparencia en los puntos y suavizado no lineal
ggplot(df, aes(x = Position, y = `Humedad Relativa (%)`)) +
geom_point(color = "black", alpha = 0.5) +  # Ajustar transparencia con alpha
geom_smooth(method = "loess", color = "blue", se = FALSE) +  # Suavizado no lineal
geom_smooth(method = "lm", color = "red", linetype = "dashed", se = FALSE) +  # Agregar también la línea de tendencia lineal
labs(title = "Position vs. Relative Humidity with Trendlines",
x = "Position", y = "Relative Humidity (%)") +
theme_minimal()
# 4. Temperature vs. Humidity Scatter Plot
# Crear bins para la columna `Position`
df$Position_Binned <- cut(df$Position, breaks = 50) # Ajusta `breaks` según el número de bins que desees
# Calcular la media de `Humedad Relativa (%)` por cada bin
df_binned <- df %>%
group_by(Position_Binned) %>%
summarise(Humedad_Media = mean(`Humedad Relativa (%)`, na.rm = TRUE))
# Graficar usando ggplot2
ggplot(df_binned, aes(x = Position_Binned, y = Humedad_Media)) +
geom_point(color = "purple") +
labs(title = "Humidity vs. Position (Binned)", x = "Position (Binned)", y = "Average Relative Humidity (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar las etiquetas del eje x si es necesario
# 4. Temperature vs. Humidity Scatter Plot
# Crear bins para la columna `Position`
df$Position_Binned <- cut(df$Position, breaks = 10) # Ajusta `breaks` según el número de bins que desees
# Calcular la media de `Humedad Relativa (%)` por cada bin
df_binned <- df %>%
group_by(Position_Binned) %>%
summarise(Humedad_Media = mean(`Humedad Relativa (%)`, na.rm = TRUE))
# Graficar usando ggplot2
ggplot(df_binned, aes(x = Position_Binned, y = Humedad_Media)) +
geom_point(color = "purple") +
labs(title = "Humidity vs. Position (Binned)", x = "Position (Binned)", y = "Average Relative Humidity (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotar las etiquetas del eje x si es necesario
lit<-df$Position_Binned <- cut(df$Position, breaks = 10) # Ajusta `breaks` según el número de bins que desees
print(lit)
library(ggplot2)
library(hexbin)
install.packages("hexbin")
library(ggplot2)
library(hexbin)
# Gráfico de hexbin
ggplot(df, aes(x = Position, y = `Temperatura (°C)`)) +
geom_hex(bins = 30) +  # Ajusta el número de bins según lo necesario
scale_fill_viridis_c() +  # Escala de color continua para representar la densidad
labs(title = "Hexbin Plot: Position vs Temperature",
x = "Position", y = "Temperature (°C)") +
theme_minimal()
df %>% group_by(Position)
ps<- df %>% group_by(Position)
View(ps)
ps<- df %>% group_by(Position) %>% select(Position,`Temperatura (°C)`)
View(ps)
ps<- df %>% group_by(`Temperatura (°C)`) %>% select(Position,`Temperatura (°C)`)
View(ps)
View(ps)
# Gráfico de densidad bidimensional
ggplot(df, aes(x = Position, y = `Temperatura (°C)`)) +
geom_point(alpha = 0.3, color = "blue") +  # Puntos con transparencia
geom_density2d(color = "red") +  # Líneas de contorno de densidad
labs(title = "2D Density Plot: Position vs Temperature",
x = "Position", y = "Temperature (°C)") +
theme_minimal()
# 7. Humidity Distribution Histogram
ggplot(df, aes(x = `Humedad Relativa (%)`)) +
geom_histogram(binwidth = 1, fill = "green", color = "black") +
labs(title = "Humidity Distribution", x = "Relative Humidity (%)", y = "Count") +
theme_minimal()
# Gráfico de hexbin
ggplot(df, aes(x = Position, y = `Temperatura (°C)`)) +
geom_hex(bins = 30) +  # Ajusta el número de bins según lo necesario
scale_fill_viridis_c() +  # Escala de color continua para representar la densidad
labs(title = "Hexbin Plot: Position vs Temperature",
x = "Position", y = "Temperature (°C)") +
theme_minimal()
# 5. CO2 Concentration vs. Temperature Scatter Plot
ggplot(df, aes(x = `Position`, y = `Temperatura (°C)`)) +
geom_point(color = "orange") +
labs(title = "CO2 Concentration vs. Temperature", x = "CO2 Concentration (ppm)", y = "Temperature (°C)") +
theme_minimal()
ggplot(df, aes(x = `Position`, y = `Temperatura (°C)`)) +
geom_point(color = "orange") +
labs(title = "CO2 Concentration vs. Temperature", x = "Position", y = "Temperature (°C)") +
theme_minimal()
# 5. CO2 Concentration vs. Temperature Scatter Plot
ggplot(df, aes(x = `Position`, y = `Temperatura (°C)`)) +
geom_point(color = "orange") +
labs(title = "Position vs. Temperature", x = "Position", y = "Temperature (°C)") +
theme_minimal()
# 6. Temperature Distribution Histogram
ggplot(df, aes(x = `Temperatura (°C)`)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Temperature Distribution", x = "Temperature (°C)", y = "Count") +
theme_minimal()
# 7. Humidity Distribution Histogram
ggplot(df, aes(x = `Humedad Relativa (%)`)) +
geom_histogram(binwidth = 1, fill = "green", color = "black") +
labs(title = "Humidity Distribution", x = "Relative Humidity (%)", y = "Count") +
theme_minimal()
# 8. CO2 Concentration Distribution Histogram
ggplot(df, aes(x = `Concentración de CO2 (ppm)`)) +
geom_histogram(binwidth = 50, fill = "red", color = "black") +
labs(title = "CO2 Concentration Distribution", x = "CO2 Concentration (ppm)", y = "Count") +
theme_minimal()
library(ggplot2)
# Gráfico de densidad bidimensional
ggplot(df, aes(x = Position, y = `Temperatura (°C)`)) +
geom_point(alpha = 0.3, color = "blue") +  # Puntos con transparencia
geom_density2d(color = "red") +  # Líneas de contorno de densidad
labs(title = "2D Density Plot: Position vs Temperature",
x = "Position", y = "Temperature (°C)") +
theme_minimal()
setwd("~/Desktop/Data Producto/shiny/shiny_inputs")
shiny::runApp()
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
runApp('~/Desktop/Data Producto/shiny/Shiny_App/app')
