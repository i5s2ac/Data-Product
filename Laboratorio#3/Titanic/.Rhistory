# Añadir un segundo eje y para bad_rate
scale_y_continuous(
name = "Total de Créditos",
sec.axis = sec_axis(~ . / max(df.age$total_credit), name = "Tasa de Malos (Bad Rate)")
) +
# Añadir etiquetas de datos sobre las barras
geom_text(aes(y = total_credit, label = total_credit), vjust = -0.5, color = "#404080", size = 3.5) +
# Añadir etiquetas de datos sobre la línea
geom_text(aes(y = bad_rate * max(total_credit), label = scales::percent(bad_rate, accuracy = 0.1)),
vjust = -0.5, color = "#404080", size = 3.5) +
labs(title = "Tasa de Malos y Total de Créditos por Edad",
x = "Edad", y = "Total de Créditos") +
theme_minimal(base_size = 14) +
# Personalizar el tema para un mejor aspecto
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
axis.title.y = element_text(color = "#69b3a2"),
axis.title.y.right = element_text(color = "#404080"),
legend.position = "none",
panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = "grey80")
)
df.age_bin <- df %>% select(age,response) %>%
mutate(age_bin = ntile(,5)) %>%
group_by(age_bin) %>% summarise(bad_credit = sum(response == 1)
,good_credit = sum(response == 0)
,total_credit = sum(good_credit, bad_credit)
,bad_rate = bad_credit/total_credit
,min_age = min(age)
,max_age = max(age)
)
df.age_bin
ggplot(df.age_bin, aes(x = age_bin)) +
# Barras para total_credit
geom_bar(aes(y = total_credit), stat = "identity", fill = "skyblue", alpha = 0.7) +
# Línea para bad_rate
geom_line(aes(y = bad_rate * max(total_credit)), color = "red", size = 1) +
# Añadir un segundo eje y para bad_rate
scale_y_continuous(
name = "Total de Créditos",
sec.axis = sec_axis(~ . / max(df.age_bin$total_credit), name = "Tasa de Malos (Bad Rate)")
) +
labs(title = "Tasa de Malos de los Bines de la Variable Age",
x = "Bines de Edad") +
theme_minimal()
df.age_bin <- df %>% select(age,response) %>%
mutate(age_bin = ntile(age,5)) %>%  %ntile genera los bines
ggplot(df.age_bin, aes(x = age_bin)) +
# Barras para total_credit
geom_bar(aes(y = total_credit), stat = "identity", fill = "skyblue", alpha = 0.7) +
# Línea para bad_rate
geom_line(aes(y = bad_rate * max(total_credit)), color = "red", size = 1) +
# Añadir un segundo eje y para bad_rate
scale_y_continuous(
name = "Total de Créditos",
sec.axis = sec_axis(~ . / max(df.age_bin$total_credit), name = "Tasa de Malos (Bad Rate)")
) +
labs(title = "Tasa de Malos de los Bines de la Variable Age",
x = "Bines de Edad") +
theme_minimal()
df.age_bin <- df %>% select(age,response) %>%
mutate(age_bin = ntile(age,5)) %>%  #ntile genera los bines
group_by(age_bin) %>% summarise(bad_credit = sum(response == 1)
,good_credit = sum(response == 0)
,total_credit = sum(good_credit, bad_credit)
,bad_rate = bad_credit/total_credit
,min_age = min(age)
,max_age = max(age)
)
df.age_bin
ggplot(df.age_bin, aes(x = age_bin)) +
# Barras para total_credit
geom_bar(aes(y = total_credit), stat = "identity", fill = "skyblue", alpha = 0.7) +
# Línea para bad_rate
geom_line(aes(y = bad_rate * max(total_credit)), color = "red", size = 1) +
# Añadir un segundo eje y para bad_rate
scale_y_continuous(
name = "Total de Créditos",
sec.axis = sec_axis(~ . / max(df.age_bin$total_credit), name = "Tasa de Malos (Bad Rate)")
) +
labs(title = "Tasa de Malos de los Bines de la Variable Age",
x = "Bines de Edad") +
theme_minimal()
head(movies)
library(flexdashboard)
library(dplyr)
library(readr)
movies <- read_csv("movies.csv")
directors <- read_csv("directors.csv")
director_genres <- read_csv("directors_genres.csv")
roles <- read_csv("roles.csv")
head(movies)
head(directors)
head(director_genres)
head(roles)
View(director_genres)
View(directors)
View(movies)
View(roles)
movies <- read_csv("movies.csv")
directors <- read_csv("directors.csv")
directors_genres <- read_csv("directors_genres.csv")
roles <- read_csv("roles.csv")
actors <- read_csv("actorss.csv")
movies <- read_csv("movies.csv")
directors <- read_csv("directors.csv")
directors_genres <- read_csv("directors_genres.csv")
roles <- read_csv("roles.csv")
actors <- read_csv("actors.csv")
movies_genres <- read_csv("movies_genres.csv")
movies_directors <- read_csv("movies_directors.csv")
View(actors)
View(director_genres)
View(directors)
View(directors_genres)
movies <- read_csv("movies.csv")
directors <- read_csv("directors.csv")
directors_genres <- read_csv("directors_genres.csv")
roles <- read_csv("roles.csv")
actors <- read_csv("actors.csv")
movies_genres <- read_csv("movies_genres.csv")
movies_directors <- read_csv("movies_directors.csv")
View(actors)
View(directors)
View(directors_genres)
View(movies)
View(movies_directors)
View(movies_genres)
View(roles)
head(actors)
head(movies)
head(directors)
head(directors_genres)
head(roles)
head(movies_genres)
head(movies_directors)
library(flexdashboard)
library(dplyr)
library(readr)
actors <- read_csv("actors.csv")
movies <- read_csv("movies.csv")
directors <- read_csv("directors.csv")
directors_genres <- read_csv("directors_genres.csv")
roles <- read_csv("roles.csv")
movies_genres <- read_csv("movies_genres.csv")
movies_directors <- read_csv("movies_directors.csv")
num_peliculas <- movies %>%
summarise(total_peliculas = n())
num_peliculas
num_peliculas <- movies %>%
summarise(total_peliculas = n())
num_peliculas
num_directores <- directors %>%
summarise(total_directores = n())
num_directores
prom_generos_director <- directors_genres %>%
group_by(director_id) %>%
summarise(num_generos = n_distinct(genre)) %>%
summarise(promedio_generos = mean(num_generos))
prom_generos_director
role_report <- roles %>%
left_join(actors, by = c("actor_id" = "id")) %>%
group_by(role) %>%
summarise(
num_movies = n_distinct(movie_id),
num_actors = sum(gender == "male", na.rm = TRUE),
num_actresses = sum(gender == "female", na.rm = TRUE),
num_directors = n_distinct(movies_directors$director_id)
)
reporte_director <- movies_directors %>%
inner_join(directors, by = c("director_id" = "id")) %>%
group_by(director_id, first_name, last_name) %>%
summarise(
num_peliculas = n_distinct(movie_id),
num_actores = n_distinct(roles$actor_id[roles$movie_id %in% movie_id]),
genero_mas_comun = movies_genres %>%
filter(movie_id %in% movie_id) %>%
count(genre) %>%
top_n(1, n) %>%
pull(genre)
)
roles_pelicula <- roles %>%
group_by(movie_id, role) %>%
summarise(total = n())
roles_pelicula
library(flexdashboard)
library(dplyr)
library(readr)
library(ggplot2)
actors <- read_csv("actors.csv")
movies <- read_csv("movies.csv")
directors <- read_csv("directors.csv")
directors_genres <- read_csv("directors_genres.csv")
roles <- read_csv("roles.csv")
movies_genres <- read_csv("movies_genres.csv")
movies_directors <- read_csv("movies_directors.csv")
num_peliculas <- movies %>%
summarise(total_peliculas = n())
num_peliculas
num_directores <- directors %>%
summarise(total_directores = n())
num_directores
prom_generos_director <- directors_genres %>%
group_by(director_id) %>%
summarise(num_generos = n_distinct(genre)) %>%
summarise(promedio_generos = mean(num_generos))
prom_generos_director
reporte_role <- roles %>%
left_join(actors, by = c("actor_id" = "id")) %>%
group_by(role) %>%
summarize(
num_peliculas = n_distinct(movie_id),
num_actores = sum(gender == "M", na.rm = TRUE),
num_actrices = sum(gender == "F", na.rm = TRUE),
num_directores = n_distinct(movies_directors$director_id)
)
reporte_role
library(flexdashboard)
library(dplyr)
library(readr)
library(ggplot2)
actors <- read_csv("actors.csv")
movies <- read_csv("movies.csv")
directors <- read_csv("directors.csv")
directors_genres <- read_csv("directors_genres.csv")
roles <- read_csv("roles.csv")
movies_genres <- read_csv("movies_genres.csv")
movies_directors <- read_csv("movies_directors.csv")
num_peliculas <- movies %>%
summarise(total_peliculas = n())
num_pelicula
num_peliculas <- movies %>%
summarise(total_peliculas = n())
num_peliculas
num_directores <- directors %>%
summarise(total_directores = n())
num_directores
prom_generos_director <- directors_genres %>%
group_by(director_id) %>%
summarise(num_generos = n_distinct(genre)) %>%
summarise(promedio_generos = mean(num_generos))
prom_generos_director
distribucion_roles_pelicula <- roles %>%
group_by(movie_id) %>%
summarize(num_roles = n())
ggplot(distribucion_roles_pelicula, aes(x = num_roles)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Distribución de Roles por Película", x = "Número de Roles", y = "Frecuencia")
distribucion_roles_director <- roles %>%
left_join(movies_directors, by = "movie_id") %>%
group_by(director_id) %>%
summarize(num_roles = n())
ggplot(distribucion_roles_director, aes(x = num_roles)) +
geom_histogram(binwidth = 1, fill = "green", color = "black") +
labs(title = "Distribución de Roles por Director", x = "Número de Roles", y = "Frecuencia")
shiny::runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/Shiny/plot_interaction')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
nearPoints(mtcars, input$click_data, xvar = 'wt', yvar = 'mpg')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
mtcars
shiny::runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
runApp('C:/Users/ximen/Downloads/Data Product/lab2')
shiny::runApp('C:/Users/ximen/Downloads/Data Product/lab2')
parcial_anonimo <- readRDS("C:/Users/ximen/Downloads/Data Wrangling/Parciales/ParcialDataWrangling2024/parcial_anonimo.rds")
parcial_anonimo <- readRDS("C:/Users/ximen/Downloads/Data Wrangling/Parciales/ParcialDataWrangling2024/parcial_anonimo.rds")
View(parcial_anonimo)
set.seed(20210493)
v<- 1:10
preguntas <-sort(sample(v, size = 5, replace = FALSE ))
paste0("Mis preguntas a resolver son: ",paste0(preguntas,collapse = ", "))
library(ggplot2)
data_territorios <- readRDS("parcial_anonimo.rds")
# Gráfico de barras de pérdidas por territorio
ggplot(data_territorios, aes(x = reorder(Territorio, Total_Ventas), y = Total_Ventas)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Territorios con Pérdidas Considerables",
x = "Territorio",
y = "Total de Ventas") +
theme_minimal()
library(ggplot2)
data_territorios <- readRDS("parcial_anonimo.rds")
# Gráfico de barras de pérdidas por territorio
ggplot(data_territorios, aes(x = reorder(Territorio, Total_Ventas), y = Total_Ventas)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Territorios con Pérdidas Considerables",
x = "Territorio",
y = "Total de Ventas") +
theme_minimal()
library(ggplot2)
library(dplyr)
data_territorios <- readRDS("parcial_anonimo.rds")
#Agrupar por cliente y país, y calcular la suma de ventas y el número de países
clientes_rentables <- datos %>%
group_by(Cliente) %>%
summarise(Total_Ventas = sum(Venta, na.rm = TRUE),
Numero_Paises = n_distinct(Pais)) %>%
filter(Numero_Paises > 1) %>%
arrange(desc(Total_Ventas))
library(ggplot2)
library(dplyr)
data_territorios <- readRDS("parcial_anonimo.rds")
#Agrupar por cliente y país, y calcular la suma de ventas y el número de países
clientes_rentables <- data_territorios %>%
group_by(Cliente) %>%
summarise(Total_Ventas = sum(Venta, na.rm = TRUE),
Numero_Paises = n_distinct(Pais)) %>%
filter(Numero_Paises > 1) %>%
arrange(desc(Total_Ventas))
# Visualizar los clientes rentables
print(clientes_rentables)
ggplot(data_territorios, aes(x = reorder(Territorio, Total_Ventas), y = Total_Ventas)) +
geom_bar(stat = "identity", fill = "red") +
coord_flip() +
labs(title = "Territorios con Pérdidas Considerables",
x = "Territorio",
y = "Total de Ventas") +
theme_minimal()
shiny::runApp('C:/Users/ximen/Downloads/Data Product/Shiny/ui-dinamico')
runApp('C:/Users/ximen/Downloads/Data Product/Shiny/ui-dinamico')
runApp('C:/Users/ximen/Downloads/Data Product/Shiny/ui-dinamico')
runApp('C:/Users/ximen/Downloads/Data Product/Shiny/ui-dinamico')
runApp('C:/Users/ximen/Downloads/Data Product/Shiny/ui-dinamico')
runApp('C:/Users/ximen/Downloads/Data Product/Shiny/ui-dinamico')
runApp('C:/Users/ximen/Downloads/Data Product/Shiny/ui-dinamico')
runApp('C:/Users/ximen/Downloads/Data Product/Shiny/ui-dinamico')
runApp('C:/Users/ximen/Downloads/Data Product/Shiny/ui-dinamico')
runApp('C:/Users/ximen/Downloads/Data Product/Shiny/ui-dinamico')
runApp('C:/Users/ximen/Downloads/Data Product/Shiny/ui-dinamico')
runApp('C:/Users/ximen/Downloads/Data Product/Shiny/ui-dinamico')
runApp('C:/Users/ximen/Downloads/Data Product/Shiny/ui-dinamico')
runApp('C:/Users/ximen/Downloads/Data Product/Shiny/ui-dinamico')
runApp('C:/Users/ximen/Downloads/Data Product/Shiny/ui-dinamico')
library(tidyverse)
library(tidyr)
library(dplyr)
library(stringr)
df <- data.frame(row = LETTERS[1:3], a = 1:3, b = 4:6, c = 7:9)
df
df %>%
pivot_longer(cols = !row, names_to = "letters", values_to = "vals")
df %>%
pivot_longer( cols = c(a,b,c), names_to = "letters", values_to = "vals")
raw<-read.csv("raw.csv")
head(raw)
View(raw)
head(raw)
raw_longer <-raw %>%
pivot_longer(cols = c(m014, m1524, m2534, m3544, m4554, m5564, m65, mu f014, f1524, f2534, f3544, f4554, f5564, f65, fu), names_to = "column", values_to = "cases")
raw_longer <-raw %>%
pivot_longer(cols = c(m014, m1524, m2534, m3544, m4554, m5564, m65, mu, f014, f1524, f2534, f3544, f4554, f5564, f65, fu), names_to = "column", values_to = "cases")
raw_longer %>%
head()
View(raw_longer)
raw_longer$sex <- str_sub(raw_longer$column, start = c(1,1),end = c(1,1))
raw_longer <-raw %>%
pivot_longer(cols = c(m014, m1524, m2534, m3544, m4554, m5564, m65, mu, f014, f1524, f2534, f3544, f4554, f5564, f65, fu), names_to = "column", values_to = "cases")
raw_longer %>%
head()
raw_longer$sex <- str_sub(raw_longer$column, start = 1, end = 1)
raw_longer$age <- str_sub(raw_longer$column, start = 2, end = 5)
ages <- c("0-4", "5-14", "0-14", "15-24", "25-34", "35-44", "45-54", "55-64", "65+", NA)
raw_longer <- raw_longer %>%
mutate(age = factor(recode(str_sub(raw_longer$age, start = 1),
"04" = "0-4",
"514" = "5-14",
"014" = "0-14",
"1524" = "15-24",
"2534" = "25-34",
"3544" = "35-44",
"4554" = "45-54",
"5564" = "55-64",
"65" = "65+",
"u" = NA_character_),
levels = ))
raw_end <- c(raw_longer$X, raw_longer$Country, raw_longer$year, raw_longer$sex, raw_longer$age, raw_longer$cases)
raw_end <- c(raw_longer$X, raw_longer$country, raw_longer$year, raw_longer$sex, raw_longer$age, raw_longer$cases)
raw_end <- df(raw_longer$X, raw_longer$country, raw_longer$year, raw_longer$sex, raw_longer$age, raw_longer$cases)
raw_end <- data.frame(raw_longer$X, raw_longer$country, raw_longer$year, raw_longer$sex, raw_longer$age, raw_longer$cases)
View(raw_end)
raw_end <- data.frame(raw_longer$X = X, raw_longer$country, raw_longer$year, raw_longer$sex, raw_longer$age, raw_longer$cases)
raw_end <- data.frame(X = raw_longer$X, raw_longer$country, raw_longer$year, raw_longer$sex, raw_longer$age, raw_longer$cases)
raw_end <- data.frame(X = raw_longer$X, Country = raw_longer$country, Year = raw_longer$year, Sex = raw_longer$sex, Age = raw_longer$age, Cases = raw_longer$cases)
install.packages('plumber')
function(msg=""){
list(msg=paste0"El mensaje es: ", msg, "'")
list(msg=paste0"El mensaje es: ", msg, "'"))
function(msg=""){
list(msg = paste0("El mensaje es: ", msg, "'"))
}
r$run(port = 8001)
function(msg=""){
list(msg = paste0("El mensaje es: ", msg, "'"))
}
r <- plumb("test1.R")
function(msg=""){
list(msg = paste0("El mensaje es: ", msg, "'"))
}
function(msg=""){
list(msg = paste0("El mensaje es: ", msg, "'"))
}
function(msg=""){
list(msg = paste0("El mensaje es: ", msg, "'"))
}
#' Graficar un histograma
#' @serializer
#' @get /plot
function(){
rand <- rnorm(100)
hist(rand)
}
function(msg = ""){
list(msg = paste0("El mensaje es: ", msg, "'"))
}
source("C:/Users/ximen/Downloads/Data Product/plumber/test1.R")
source("C:/Users/ximen/Downloads/Data Product/plumber/main.R")
source("C:/Users/ximen/Downloads/Data Product/plumber/main.R")
setwd("C:/Users/ximen/Downloads/Data Product/plumber")
source("C:/Users/ximen/Downloads/Data Product/plumber/main.R")
fancyRpartPlot(fit)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
library(readr)
library(rpart)
libray(rattle)
source("~/.active-rstudio-document")
install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
source("~/.active-rstudio-document")
setwd("C:/Users/ximen/Downloads/Data Product/plumber/Archive")
source("~/.active-rstudio-document")
library(readr)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
train <- read_csv("train.csv")
test <- read_csv("test.csv")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSP + Parch + Embarked,
data = train,
method = "class")
train <- read_csv("train.csv")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked,
data = train,
method = "class")
predict(fit, test, type = "class")
saveRDS(fit, "final_model.rds")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train,
method = "class")
fancyRpartPlot(fit)
saveRDS(fit, "final_model.rds")
source("~/.active-rstudio-document")
